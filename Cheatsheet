Arrays 
%- modules 
if a number modulo is 0 the number is even, if the number is 1 the number is odd
LOOP- used when you would like to carrt out certaub set of instructions
3 parts to a loop - An integer, a conditional statement (i<100), an operation to modify the integer value, AFTER the instructions inside the loop are completed (i++).
FOR EACH LOOP- the loop will go through each element in the array and carry out the set of instructions for each value.
WHILE LOOP- willl countinously carry out it instructions while a conditional statement given to its true.
DO WHILE LOOP - will always carry out instructionsat at least once, even before checking conditional loop.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
what is an algorithm?
- an algorithm is a list of very speific instructions or steps to help solve a problem or complete a task.
Searching Algorithms


LINEAR SEARCH - start at the beginning and systematically check data, until you find what you are looking for. Linear searching algorithms is a BRUTE FORCE method.
JAVASCRIPT PUSUECODE
LOOP- for (let i =0; i<array.length; i++0)
And then a set of instructions.

BINARY SEARCH
-Binary Search can only be used on SORTED arrays 
// Create iterators for left, right and mid indexes
  let leftIndex = 0;
  let midIndex = 0;
  let rightIndex = sortedArr.length - 1;
  
  // While the left iterator is less than or equal to the right 
  // iterator continue the loop  
  while (leftIndex <= rightIndex) {
    
   // update the midIndex after the iterators have changed
   midIndex = Math.floor((leftIndex + rightIndex) / 2);
   // If the element at the midIndex equals target return 1
   if (sortedArr[midIndex] === target) {
      return 1;
    
   // If target < than mid element reduce the right index by 1
   } else if (target < sortedArr[midIndex]) {
      rightIndex = midIndex - 1;
    
   // If target > than mid element increase the left index by 1
   } else {
      leftIndex = midIndex + 1;
    }
  }
  // If target never equals midIndex return -1
  return -1;
};
