Arrays 
%- modules 
if a number modulo is 0 the number is even, if the number is 1 the number is odd
LOOP- used when you would like to carry out specific set of instructions
3 parts to a loop - An integer, a conditional statement (i<100), an operation to modify the integer value, AFTER the instructions inside the loop are completed (i++).
FOR EACH LOOP- the loop will go through each element in the array and carry out the set of instructions for each value.
WHILE LOOP- willl countinously carry out it instructions while a conditional statement given to its true.
DO WHILE LOOP - will always carry out instructionsat at least once, even before checking conditional loop.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
what is an algorithm?
- an algorithm is a list of very speific instructions or steps to help solve a problem or complete a task.
Searching Algorithms


LINEAR SEARCH - start at the beginning and systematically check data, until you find what you are looking for. Linear searching algorithms is a BRUTE FORCE method.
JAVASCRIPT PUSUECODE
LOOP- for (let i =0; i<array.length; i++)
And then a set of instructions.

BINARY SEARCH
-Binary Search can only be used on SORTED arrays 
// Create iterators for left, right and mid indexes
  let leftIndex = 0;
  let midIndex = 0;
  let rightIndex = sortedArr.length - 1;
  
  // While the left iterator is less than or equal to the right 
  // iterator continue the loop  
  while (leftIndex <= rightIndex) {
    
   // update the midIndex after the iterators have changed
   midIndex = Math.floor((leftIndex + rightIndex) / 2);
   // If the element at the midIndex equals target return 1
   if (sortedArr[midIndex] === target) {
      return 1;
    
   // If target < than mid element reduce the right index by 1
   } else if (target < sortedArr[midIndex]) {
      rightIndex = midIndex - 1;
    
   // If target > than mid element increase the left index by 1
   } else {
      leftIndex = midIndex + 1;
    }
  }
  // If target never equals midIndex return -1
  return -1;
};

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
STACKS
- A data structure which contains all of the tasks you instruct your program to compare. Uses the LAST IN FIRST OUT (LIFO) retoric.   
Pop () to take an element off fromt the back 
Push () to put an alement on the back 
shift () removes an element at the front 
unshoft () adds an element to the front
peek () shows the element on top 
Length → Return the length of the stack.
Search → Search for the element in the stack.
IsEmpty → Check if the stack is empty.
Print → Print the elements of the stack.

QUEUES
- a similar data structure to STACKS. However it is FIRST IN FIRST OUT (FIFO)


LINKED LIST
- is a sequential acess linear data structure in which every element is a seperate object called node
- A node list contains two items, the data and the pointer to the next node. 
- not operator = !
Adding to the head of the LINKED LIST. : make the new node's pointer to the current head of the linked list 
Removing  the head of the LINKED LIST : set the head nodes pointer to the null value

Adding a node to the middle of a LIMKED LIST : 1) make the pointer of the new node to the the node after the location we want to insert at.
2) set the node before the location we want to the insert to poiny towards the new node. 
Removing a node from the middle - make the pointer, point to the node after the node we are removing. Then make the node we are removing point to null. 

Adding a node to the tail of a LINKED LIST: make the current tail point towards the new node you want to add, instead of null. 
Removing a node from the tail of a LINKED LIST: set the previous tail to point towards null. Instead of the current value. 



MERGE SORT 
- A stable, comparison-based, recursive, divide and conquer algorithm which repeatdly breaks down a list of elements into smaller and smaller parts. 
Then puts it together sorted. 

- In order to get the list from an unsorted state to a sorted state. We do so by comparing elemnents. 
- Merge sort has 3 components. The left index, the right index and the full array . 

EXAMPLE CODE 
MERGE TO SORTED ARRAYS
function merge(arr1, arr2) {
  let merged = [];
  // index for arr1
  let index1 = 0;
  // index for arr2
  let index2 = 0;
  while (index1 < arr1.length && index2 < arr2.length) {
    if (arr1[index1] < arr2[index2]) {
      merged.push(arr1[index1]);
      index1++;
    } else {
      merged.push(arr2[index2]);
      index2++;
    }
  }
  while (index1 < arr1.length) {
    merged.push(arr1[index1]);
    index1++;
  }
  while (index2 < arr2.length) {
    merged.push(arr2[index2]);
    index2++;
  }
  return merged;
}

function mergeSort(arr) {
  // base case
  if (arr.length < 2) return arr;
  let mid = Math.floor(arr.length / 2);
  let firstHalf = arr.slice(0, mid);
  let secondHalf = arr.slice(mid);
  return merge(mergeSort(firstHalf), mergeSort(secondHalf));
}




QUICK SORT




HASH TABLES

TREES
- An abstract data structure which contains a series of linked nodes connected together to form a hirechacal representation of information.
vetice- a certain node in a tree
Edge- a connection between nodes
Root node - Top most of a tree 

BINARY SEARCH TREE 
- For an given parent node, the child to the left has a value less than or equal to itself, and the child to the right has a value greater than or equal to itself. 
- no two nodes can contain the same value 
MERGING TWO BST

Example code - recursive approach 
const mergeTrees = (t1, t2) => {
    if (!t1 && !t2) return null;
    
    const left = mergeTrees(t1 && t1.left, t2 && t2.left);
    const right = mergeTrees(t1 && t1.right, t2 && t2.right);
        
    return new TreeNode(
        (t1 && t1.val) + (t2 && t2.val),
        left,
        right,
    );
};


GRAPHS
- A nonlinear data structure consiting of nodes and edges
- No specific starting point - mutiple starting points and mutiple branches. 


BREADTH-FIRST SEARCH


DEPTH- FIRST SEARCH 






